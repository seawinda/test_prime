{"version":3,"sources":["components/search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","this","props","term","data","update","className","value","type","placeholder","onChange","e","target","filter","result","match","chars","search","RegExp","result_arr","map","item","replace","cloneStr","toLowerCase","includes","valueLength","length","startIndex","item_arr","searchIndex","push","slice","lightStr","substring","join","i","active","Component","App","state","initialData","refs","textRef","innerHTML","setState","config","loadData","updateData","bind","ref","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAEqBA,G,uLACT,IAAD,EACwBC,KAAKC,MAA5BC,EADD,EACCA,KAAMC,EADP,EACOA,KAAMC,EADb,EACaA,OA4CpB,OACE,yBAAKC,UAAU,wBACb,2BACEC,MAAOJ,EACPK,KAAK,OACLF,UAAU,eACVG,YAAY,YACZC,SAjDa,SAAAC,GACjB,IAAMJ,EAAQI,EAAEC,OAAOL,MACnBM,EAAST,EACb,GAAIG,EAgCF,IA/BA,IACMO,EAASV,EAAKW,MADP,YAEPC,EAAQ,UACRC,EAAS,IAAIC,OAAOX,EAAO,KAC3BY,EAAaL,EAAOM,KAAI,SAAAC,IACA,IAAxBA,EAAKJ,OAAOD,KACdK,EAAOA,EAAKC,QAAQN,EAAO,MAE7B,IAAIO,EAAWF,EAAKG,cACpB,GAAID,EAASE,SAASlB,EAAMiB,eAAgB,CAI1C,IAHA,IAAIE,EAAcnB,EAAMoB,OACpBC,EAAa,EACbC,EAAW,GACRN,EAASE,SAASlB,EAAMiB,gBAAgB,CAC7C,IAAIM,EAAcP,EAASN,OAAOA,GAClCY,EAASE,KAAKV,EAAKW,MAAM,EAAGF,IAC5B,IAAIG,EACF,uCACAZ,EAAKa,UAAUJ,EAAaJ,EAAcI,GAC1C,UACFD,EAASE,KAAKE,GACdL,EAAaF,EAAcI,EAC3BP,EAAWA,EAASS,MAAMJ,GAC1BP,EAAOA,EAAKW,MAAMJ,GAEpBC,EAASE,KAAKV,GACdA,EAAOQ,EAASM,KAAK,IAEvB,OAAOd,KAGAe,EAAI,EAAGA,EAAItB,EAAOa,OAAQS,IACjCvB,EAASA,EAAOS,QAAQR,EAAOsB,GAAIjB,EAAWiB,IAGlD/B,EAAO,CAAED,KAAMS,EAAQwB,OAAQ,EAAGlC,KAAMI,Y,GA3CV+B,cCEfC,E,YACnB,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDsC,MAAQ,CACXpC,KAAM,KACNiC,OAAQ,EACRlC,KAAM,IANS,E,wEAWjBF,KAAKwC,YAAcxC,KAAKyC,KAAKC,QAAQC,UACrC3C,KAAK4C,SAAS,CAACzC,KAAMH,KAAKwC,gB,iCAEjBK,GACT7C,KAAK4C,SAASC,GACd7C,KAAKyC,KAAKC,QAAQC,UAAUE,EAAO1C,O,0CAInCH,KAAK8C,a,+BAIL,OACE,oCACE,kBAAC,EAAD,CAAQ5C,KAAMF,KAAKuC,MAAMrC,KAAMC,KAAMH,KAAKwC,YAAapC,OAAQJ,KAAK+C,WAAWC,KAAKhD,QACpF,yBAAKiD,IAAI,WACT,y4BACA,u9BACA,kyBACA,20BACA,upB,GAjCyBZ,aCQba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvC,MACvB,2DCZNwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c8434a51.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Search extends Component {\r\n  render() {\r\n    const { term, data, update } = this.props;\r\n\r\n    const dataSearch = e => {\r\n      const value = e.target.value;\r\n      let filter = data;\r\n      if (value) {\r\n        let regexp = />(.*?)</g;\r\n        const result = data.match(regexp);\r\n        const chars = /&nbsp;/g;\r\n        const search = new RegExp(value, \"i\");\r\n        const result_arr = result.map(item => {\r\n          if (item.search(chars) !== -1) {\r\n            item = item.replace(chars, \" \");\r\n          }\r\n          let cloneStr = item.toLowerCase();\r\n          if (cloneStr.includes(value.toLowerCase())) {\r\n            let valueLength = value.length;\r\n            let startIndex = 0;\r\n            let item_arr = [];\r\n            while (cloneStr.includes(value.toLowerCase())) {\r\n              let searchIndex = cloneStr.search(search);\r\n              item_arr.push(item.slice(0, searchIndex));\r\n              let lightStr =\r\n                '<span style=\"background-color: red\">' +\r\n                item.substring(searchIndex, valueLength + searchIndex) +\r\n                \"</span>\";\r\n              item_arr.push(lightStr);\r\n              startIndex = valueLength + searchIndex;\r\n              cloneStr = cloneStr.slice(startIndex);\r\n              item = item.slice(startIndex);\r\n            }\r\n            item_arr.push(item);\r\n            item = item_arr.join(\"\");\r\n          }\r\n          return item;\r\n        });\r\n\r\n        for (let i = 0; i < result.length; i++) {\r\n          filter = filter.replace(result[i], result_arr[i]);\r\n        }\r\n      }\r\n      update({ data: filter, active: 0, term: value });\r\n    };\r\n\r\n    return (\r\n      <div className='searchbar form-group'>\r\n        <input\r\n          value={term}\r\n          type='text'\r\n          className='form-control'\r\n          placeholder='Search...'\r\n          onChange={dataSearch}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/search/Search\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      data: null,\n      active: 0,\n      term: \"\"\n    };\n  }\n\n  loadData() {\n    this.initialData = this.refs.textRef.innerHTML;    \n    this.setState({data: this.initialData});\n  }\n  updateData(config) {\n    this.setState(config);\n    this.refs.textRef.innerHTML=config.data;\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    return (\n      <>\n        <Search term={this.state.term} data={this.initialData} update={this.updateData.bind(this)} />\n        <div ref=\"textRef\">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Malesuada nunc vel risus commodo viverra maecenas accumsan lacus vel. Nisi porta lorem mollis aliquam ut porttitor leo a diam. Tincidunt praesent semper feugiat nibh sed. Varius quam quisque id diam vel quam elementum pulvinar etiam. Etiam sit amet nisl purus in mollis nunc. Nibh nisl condimentum id venenatis a condimentum vitae. Bibendum arcu vitae elementum curabitur vitae nunc. Risus viverra adipiscing at in. Erat nam at lectus urna duis convallis convallis tellus. Ut diam quam nulla porttitor massa id neque aliquam. Morbi tempus iaculis urna id volutpat lacus laoreet non. Morbi tincidunt augue interdum velit euismod in pellentesque. Mauris sit amet massa vitae tortor condimentum lacinia quis.</p>\n        <p>Eu turpis egestas pretium aenean pharetra magna ac placerat. Purus in mollis nunc sed id semper. Augue interdum velit euismod in pellentesque massa placerat. Vel quam elementum pulvinar etiam non. Sapien pellentesque habitant morbi tristique. Sodales ut eu sem integer vitae justo. Bibendum neque egestas congue quisque egestas diam in arcu cursus. Tempor nec feugiat nisl pretium fusce id velit. Mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare. Orci eu lobortis elementum nibh tellus. Pellentesque eu tincidunt tortor aliquam nulla facilisi cras fermentum. Arcu vitae elementum curabitur vitae nunc. Etiam dignissim diam quis enim. A erat nam at lectus. Duis at tellus at urna. Vivamus arcu felis bibendum ut. Sit amet dictum sit amet. Faucibus nisl tincidunt eget nullam non nisi est sit amet. Consectetur lorem donec massa sapien. At ultrices mi tempus imperdiet nulla malesuada.</p>\n        <p>Sit amet nisl suscipit adipiscing bibendum. Mauris augue neque gravida in fermentum. Volutpat est velit egestas dui id ornare. Interdum velit laoreet id donec ultrices tincidunt. Tellus rutrum tellus pellentesque eu tincidunt tortor aliquam. Imperdiet dui accumsan sit amet. Pulvinar mattis nunc sed blandit libero volutpat sed cras ornare. Faucibus scelerisque eleifend donec pretium vulputate. Tellus in metus vulputate eu scelerisque felis imperdiet. Mattis aliquam faucibus purus in massa. In cursus turpis massa tincidunt dui. Elit at imperdiet dui accumsan. In ante metus dictum at tempor commodo. In tellus integer feugiat scelerisque varius morbi enim. Molestie ac feugiat sed lectus vestibulum mattis ullamcorper velit sed.</p>\n        <p>Ridiculus mus mauris vitae ultricies leo. Lacus laoreet non curabitur gravida arcu ac. Sollicitudin aliquam ultrices sagittis orci a scelerisque purus. Ultrices dui sapien eget mi proin sed libero enim sed. Quisque egestas diam in arcu cursus euismod quis viverra. Fusce ut placerat orci nulla. Amet aliquam id diam maecenas ultricies mi. Egestas dui id ornare arcu odio ut sem. Odio tempor orci dapibus ultrices in iaculis nunc. Justo laoreet sit amet cursus sit amet. Imperdiet massa tincidunt nunc pulvinar sapien et. Nulla facilisi etiam dignissim diam quis enim lobortis scelerisque fermentum. Morbi quis commodo odio aenean sed adipiscing diam donec. Pellentesque adipiscing commodo elit at imperdiet. Facilisi nullam vehicula ipsum a arcu cursus vitae congue mauris.</p>\n        <p>Neque volutpat ac tincidunt vitae semper quis lectus nulla at. Sollicitudin nibh sit amet commodo nulla facilisi nullam. Eget duis at tellus at urna condimentum mattis pellentesque. Nunc vel risus commodo viverra maecenas. Morbi non arcu risus quis varius quam. Ut consequat semper viverra nam libero justo laoreet sit. Ut aliquam purus sit amet. Tristique senectus et netus et malesuada fames ac turpis. Donec ac odio tempor orci. Diam phasellus vestibulum lorem sed risus ultricies tristique nulla. Phasellus egestas tellus rutrum tellus. Sed turpis tincidunt id aliquet risus feugiat in.</p>\n      </div>\n    </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}